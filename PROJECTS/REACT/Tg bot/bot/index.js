// initialization
const TelegramBot = require("node-telegram-bot-api");
const token = "6366307757:AAEkZ_W2arbuJzSzS_kRXfHFgvsDXFSTYGE";
const bot = new TelegramBot(token, {
  polling: true,
});

// database
const data = require("./database");

// TG bot üî•
bot.on("message", async (msg) => {
  const userId = msg.from.username;
  const chatId = msg.chat.id;
  const messageId = msg.message_id;
  const text = msg.text;
  const html = `
  <strong>–ü—Ä–∏–≤–µ—Ç–∏–∫–∏ –∏ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, 
  ${msg.from.first_name} üî•</strong>
–ú–µ–Ω—è –∑–æ–≤—É—Ç <i>–õ—é—Ü–∏</i> –∏ —è —Ç–≤–æ–π <tg-spoiler>–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç</tg-spoiler>
  –¢—É—Ç –≤—Å—ë –ø—Ä–æ—Å—Ç–æ –∫–∞–∫ –≤–∞—Ä–∏—Ç—å –ª—é–¥–∏—à–µ–∫ –≤ –∫–æ—Ç–ª–µ! –ú–æ–∂–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–µ–π—Ç–∏–Ω–≥ –≥–ª—è–Ω—É—Ç—å, <s>–∫–æ—Å—Ç–∏ –¥—Ä—É–≥-–¥—Ä—É–≥—É –ø–µ—Ä–µ–º—ã—Ç—å</s> –æ—Ü–µ–Ω–∏—Ç—å –∫—Ç–æ –∏–∑ –¥—Ä—É–∑–µ–π –∑–∞–±—Ä–∞–ª—Å—è –≤—ã—à–µ
  –ù–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–≤–µ—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π LVL - —Ç–∞–º –≥–æ—Ä–¥–æ—Å—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è ^^
  –ò —É <i>–ú—è–≤–∫–∏</i> –∫–æ—Å—Ç–∏ –±—Ä–æ—Å—å, –º–æ–∂–µ—Ç —Ö–æ—Ç—å –Ω–∞ —Å–µ–π —Ä–∞–∑ –ø–æ–≤–µ–∑—ë—Ç..
  `;

  // commands
  if (text === "/start") {
    // clear command
    await bot.deleteMessage(chatId, messageId);

    // Luci sticker
    await bot.sendSticker(
      chatId,
      "CAACAgIAAxkBAAEL1eBmDINRenGNOxRjC0X7XkW6u6iJZgAC9AADIjeOBDqJ2Xzsyg0kNAQ"
    );

    // welcome message + menu buttons
    await bot.sendMessage(chatId, html, {
      parse_mode: "HTML",
      reply_markup: {
        keyboard: [
          ["üí∏ Payment", "üíØ Rank"],
          ["üòà PH", "üå¶ Weather"],
          ["üé∞‡∏Ö·®ê·µâ·µí ∑"],
        ],
        resize_keyboard: true,
      },
    });
  } else if (text === "üí∏ Payment") {
    // clear command
    await bot.deleteMessage(chatId, messageId);

    // Luci sticker
    bot.sendSticker(
      chatId,
      "CAACAgIAAxkBAAEL67xmHatAm6-t7M7YlII52PNjZ3nGFgAC6AADIjeOBAc5lJnaQ4OpNAQ"
    );

    // sending payment
    await bot.sendInvoice(
      chatId,
      "–û–ø–ª–∞—Ç–∞ –≤–æ–ª–ª–µ–π–±–æ–ª–∞",
      "üí≥ ‚û† üîê ‚û† üèê",
      "payload",
      "390540012:LIVE:51828",
      "RUB",
      [
        {
          label: "volleyball",
          amount: 850 * 100,
        },
      ],
      { protect_content: true }
    );
  } else if (text === "üíØ Rank") {
    // clear command
    await bot.deleteMessage(chatId, messageId);

    // Luci sticker
    await bot.sendSticker(
      chatId,
      "CAACAgIAAxkBAAEL675mHawiKvHHPUHAyB42vZV-1GLjowAC_AADIjeOBLcpK5tmtTJXNAQ"
    );

    // list of players by rank
    function userList(points, name) {
      return `
      üíØ- <u><b>Rank</b></u>
${
  userId === data.id.max
    ? `${points} ‚áú ${name} ${data.flow.max}‚ôõ`
    : `${data.pts.max} - Max ${data.flow.max}‚ôõ`
}
${
  userId === data.id.sveta
    ? `${points} ‚áú ${name} ${data.flow.sveta}`
    : `${data.pts.sveta} - –°–≤–µ—Ç–∞ ${data.flow.sveta}`
}
${
  userId === data.id.gleb
    ? `${points} ‚áú ${name} ${data.flow.gleb}`
    : `${data.pts.gleb} - –ì–ª–µ–±—ä ${data.flow.gleb}`
}
${
  userId === data.id.pasha
    ? `${points} ‚áú ${name} ${data.flow.pasha}`
    : `${data.pts.pasha} - –ü–∞—É–ª—å ${data.flow.pasha}`
}
${
  userId === data.id.barca
    ? `${points} ‚áú ${name} ${data.flow.barca}`
    : `${data.pts.barca} - –ë–∞—Ä—Å–∞ ${data.flow.barca}`
}
${
  userId === data.id.samu
    ? `${points} ‚áú ${name} ${data.flow.samu}`
    : `${data.pts.samu} - –°–∞–º—É ${data.flow.samu}`
}
${
  userId === data.id.fedya
    ? `${points} ‚áú ${name} ${data.flow.fedya}`
    : `${data.pts.fedya} - –§–µ–¥—è ${data.flow.fedya}`
}
${
  userId === data.id.nina
    ? `${points} ‚áú ${name} ${data.flow.nina}`
    : `${data.pts.nina} - –ù–∏–Ω–∞ ${data.flow.nina}`
}
${
  userId === data.id.jane
    ? `${points} ‚áú ${name} ${data.flow.jane}`
    : `${data.pts.jane} - –ñ–∞–Ω–∏–Ω ${data.flow.jane}`
}
${
  userId === data.id.bd
    ? `${points} ‚áú ${name} ${data.flow.bd}`
    : `${data.pts.bd} - –ë–î ${data.flow.bd}`
}
${
  userId === data.id.polly
    ? `${points} ‚áú ${name} ${data.flow.polly}`
    : `${data.pts.polly} - –ü–æ–ª–ª–∏ ${data.flow.polly}`
}
${
  userId === data.id.tema
    ? `${points} ‚áú ${name} ${data.flow.tema}`
    : `${data.pts.tema} - –¢—ë–º–∞ ${data.flow.tema}`
}
${
  userId === data.id.max2
    ? `${points} ‚áú ${name} ${data.flow.max2}`
    : `${data.pts.max2} - –ú–∞–∫—Å–∏–º ${data.flow.max2}`
}
${
  userId === data.id.vera
    ? `${points} ‚áú ${name} ${data.flow.vera}`
    : `${data.pts.vera} - –í–µ—Ä–∞ ${data.flow.vera}`
}
${
  userId === data.id.vlad2
    ? `${points} ‚áú ${name} ${data.flow.vlad2}`
    : `${data.pts.vlad2} - –í–ª–∞–¥ ${data.flow.vlad2}`
}
${
  userId === data.id.dante
    ? `${points} ‚áú ${name} ${data.flow.dante}`
    : `${data.pts.dante} - –î–∞–Ω—Ç–µ ${data.flow.dante}`
}
${
  userId === data.id.mario
    ? `${points} ‚áú ${name} ${data.flow.mario}`
    : `${data.pts.mario} - –ú–∞—Ä–∏–æ ${data.flow.mario}`
}
${
  userId === data.id.jane_jr
    ? `${points} ‚áú ${name} ${data.flow.jane_jr}`
    : `${data.pts.jane_jr} - –ñ–µ–Ω—è ${data.flow.jane_jr}`
}
${
  userId === data.id.anya
    ? `${points} ‚áú ${name} ${data.flow.anya}`
    : `${data.pts.anya} - –ê–Ω—å–∫–∞ ${data.flow.anya}`
}
    `;
    }

    // strong focus on current user
    function userFocus() {
      if (userId === data.id.max) {
        return userList(
          `<strong>${data.pts.max}</strong>`,
          "<strong>Max</strong>"
        );
      } else if (userId === data.id.tema) {
        return userList(
          `<strong>${data.pts.tema}</strong>`,
          "<strong>–¢—ë–º–∞</strong>"
        );
      } else if (userId === data.id.fedya) {
        return userList(
          `<strong>${data.pts.fedya}</strong>`,
          "<strong>–§–µ–¥—è</strong>"
        );
      } else if (userId === data.id.samu) {
        return userList(
          `<strong>${data.pts.samu}</strong>`,
          "<strong>–°–∞–º—É</strong>"
        );
      } else if (userId === data.id.gleb) {
        return userList(
          `<strong>${data.pts.gleb}</strong>`,
          "<strong>–ì–ª–µ–±—ä</strong>"
        );
      } else if (userId === data.id.pasha) {
        return userList(
          `<strong>${data.pts.pasha}</strong>`,
          "<strong>–ü–∞—É–ª—å</strong>"
        );
      } else if (userId === data.id.barca) {
        return userList(
          `<strong>${data.pts.barca}</strong>`,
          "<strong>–ë–∞—Ä—Å–∞</strong>"
        );
      } else if (userId === data.id.nina) {
        return userList(
          `<strong>${data.pts.nina}</strong>`,
          "<strong>–ù–∏–Ω–∞</strong>"
        );
      } else if (userId === data.id.polly) {
        return userList(
          `<strong>${data.pts.polly}</strong>`,
          "<strong>–ü–æ–ª–ª–∏</strong>"
        );
      } else if (userId === data.id.jane) {
        return userList(
          `<strong>${data.pts.jane}</strong>`,
          "<strong>–ñ–∞–Ω–∏–Ω</strong>"
        );
      } else if (userId === data.id.vera) {
        return userList(
          `<strong>${data.pts.vera}</strong>`,
          "<strong>–í–µ—Ä–∞</strong>"
        );
      } else if (userId === data.id.jane_jr) {
        return userList(
          `<strong>${data.pts.jane_jr}</strong>`,
          "<strong>–ñ–µ–Ω—è</strong>"
        );
      } else if (userId === data.id.anya) {
        return userList(
          `<strong>${data.pts.anya}</strong>`,
          "<strong>–ê–Ω—å–∫–∞</strong>"
        );
      } else if (userId === data.id.dante) {
        return userList(
          `<strong>${data.pts.dante}</strong>`,
          "<strong>–î–∞–Ω—Ç–µ</strong>"
        );
      } else if (userId === data.id.sveta) {
        return userList(
          `<strong>${data.pts.sveta}</strong>`,
          "<strong>–°–≤–µ—Ç–∞</strong>"
        );
      } else if (userId === data.id.bd) {
        return userList(
          `<strong>${data.pts.bd}</strong>`,
          "<strong>–ë–î</strong>"
        );
      } else if (userId === data.id.mario) {
        return userList(
          `<strong>${data.pts.mario}</strong>`,
          "<strong>–ú–∞—Ä–∏–æ</strong>"
        );
      } else if (userId === data.id.max2) {
        return userList(
          `<strong>${data.pts.max2}</strong>`,
          "<strong>–ú–∞–∫—Å–∏–º</strong>"
        );
      } else if (userId === data.id.vlad2) {
        return userList(
          `<strong>${data.pts.vlad2}</strong>`,
          "<strong>–í–ª–∞–¥</strong>"
        );
      }
    }

    const list = userFocus();

    // table ranks
    await bot.sendMessage(chatId, list, {
      parse_mode: "HTML",
    });
  } else if (text === "üòà PH") {
    // clear command
    await bot.deleteMessage(chatId, messageId);

    await bot.sendSticker(
      chatId,
      "CAACAgIAAxkBAAEMMyZmUm0FARF0YgcVclh_ILxGUJBrnwAC-QADIjeOBJnA-6uUX_VsNQQ"
    );

    await bot.sendMessage(chatId, "–ó–∞–≥—Ä—É–∂–∞—é —Ö–æ-—Ö–æ..");

    const video = "./src/video/ph1.mp4";
    await bot.sendVideo(chatId, video);
  } else if (text === "üå¶ Weather") {
    // clear command
    await bot.deleteMessage(chatId, messageId);

    // forecast mini app
    const fetchData = async () => {
      // api
      const storage = {
        city: "Saint-Petersburg",
      };
      const apiKey = "bd7c6ee5039741bd911165753242901";
      const urlForecast = `http://api.weatherapi.com/v1/forecast.json?key=${apiKey}&q=${storage.city}&days=3`;

      // getting data
      const response = await fetch(`${urlForecast}`);
      const data = await response.json();

      // today data
      const maxTemp = data.forecast.forecastday[0].day.maxtemp_c;
      const minTemp = data.forecast.forecastday[0].day.mintemp_c;
      const windMax = data.forecast.forecastday[0].day.maxwind_kph;
      const UV = data.forecast.forecastday[0].day.uv;

      // tommorrow data
      const maxTempT = data.forecast.forecastday[1].day.maxtemp_c;
      const minTempT = data.forecast.forecastday[1].day.mintemp_c;
      const windMaxT = data.forecast.forecastday[1].day.maxwind_kph;
      const UVT = data.forecast.forecastday[1].day.uv;

      // after tommorrow data
      const maxTempAT = data.forecast.forecastday[2].day.maxtemp_c;
      const minTempAT = data.forecast.forecastday[2].day.mintemp_c;
      const windMaxAT = data.forecast.forecastday[2].day.maxwind_kph;
      const UVAT = data.forecast.forecastday[2].day.uv;

      const results = `
      <strong>–°–µ–≥–æ–¥–Ω—è</strong>
üå°Ô∏è ${maxTemp}¬∞ / ${minTemp}¬∞ | ${
        UV <= 5 ? `‚òÄÔ∏è ${UV} uv` : `üî• ${UV} uv`
      } | üçÉ ${Math.round(windMax / 3.6)} –º/—Å`;

      const resultsT = `
      <strong>–ó–∞–≤—Ç—Ä–∞</strong>
üå°Ô∏è ${maxTempT}¬∞ / ${minTempT}¬∞ | ${
        UV <= 5 ? `‚òÄÔ∏è ${UVT} uv` : `üî• ${UVT} uv`
      } | üçÉ ${Math.round(windMaxT / 3.6)} –º/—Å`;

      const resultsAT = `
      <strong>–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞</strong>
üå°Ô∏è ${maxTempAT}¬∞ / ${minTempAT}¬∞ | ${
        UV <= 5 ? `‚òÄÔ∏è ${UVAT} uv` : `üî• ${UVAT} uv`
      } | üçÉ ${Math.round(windMaxAT / 3.6)} –º/—Å`;

      // it was a spot for dynamic weather emoji ;(
      await bot.sendSticker(
        chatId,
        "CAACAgIAAxkBAAEMMxxmUmGmQRB2bFH1I2BvKYzncnNWgQAC7wADIjeOBLJlnQodNw85NQQ"
      );

      // today weather
      await bot.sendMessage(chatId, results, {
        parse_mode: "HTML",
      });
      // tommorrow weather
      await bot.sendMessage(chatId, resultsT, {
        parse_mode: "HTML",
      });
      // after tommorrow weather
      await bot.sendMessage(chatId, resultsAT, {
        parse_mode: "HTML",
      });
    };
    fetchData();
  } else if (text === "üé∞‡∏Ö·®ê·µâ·µí ∑") {
    // clear command
    await bot.deleteMessage(chatId, messageId);

    // Gambling
    await bot.sendDice(chatId, { emoji: "üé≤" });
  }
});
